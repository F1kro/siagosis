generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "mysql"
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  username      String    @unique
  email         String?   @unique
  password      String
  role          String    // admin, teacher, student, parent
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  student       Student?
  teacher       Teacher?
  parent        Parent?
  news          News[]
  sentMessages     Message[]  @relation("SentMessages")
  receivedMessages Message[]  @relation("ReceivedMessages")
  notifications    Notification[]
}

model Student {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  nis         String    @unique
  birthDate   DateTime
  gender      String
  religion    String?
  address     String
  classId     String
  class       ClassRoom @relation(fields: [classId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  parents     ParentStudent[]
  attendance  Attendance[]
  grades      Grade[]
  behaviorNotes BehaviorNote[]
  todos       Todo[]
}

model Teacher {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  nip           String    @unique
  nik           String    @unique
  subjectId     String
  subject       Subject   @relation(fields: [subjectId], references: [id])
  teachingHours Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  attendance    Attendance[]
  grades        Grade[]
  behaviorNotes BehaviorNote[]
}

model Parent {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  nik         String    @unique
  address     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  students    ParentStudent[]
}

model ParentStudent {
  id          String    @id @default(cuid())
  parentId    String
  parent      Parent    @relation(fields: [parentId], references: [id], onDelete: Cascade)
  studentId   String
  student     Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([parentId, studentId])
}

model ClassRoom {
  id          String    @id @default(cuid())
  name        String
  level       String
  section     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  students    Student[]
  attendance  Attendance[]
  classSubjects ClassSubject[]
}

model Subject {
  id          String    @id @default(cuid())
  name        String
  code        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  teachers    Teacher[]
  grades      Grade[]
  attendance  Attendance[]
  classSubjects ClassSubject[]
}

model ClassSubject {
  id          String    @id @default(cuid())
  classId     String
  class       ClassRoom @relation(fields: [classId], references: [id], onDelete: Cascade)
  subjectId   String
  subject     Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([classId, subjectId])
}

model Attendance {
  id          String    @id @default(cuid())
  studentId   String
  student     Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  classId     String
  class       ClassRoom @relation(fields: [classId], references: [id], onDelete: Cascade)
  subjectId   String
  subject     Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacherId   String
  teacher     Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  date        DateTime
  status      String    // present, absent, late
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Grade {
  id          String    @id @default(cuid())
  studentId   String
  student     Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subjectId   String
  subject     Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacherId   String
  teacher     Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  type        String
  value       Float
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model BehaviorNote {
  id          String    @id @default(cuid())
  studentId   String
  student     Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacherId   String
  teacher     Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  title       String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Todo {
  id          String    @id @default(cuid())
  studentId   String
  student     Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  title       String
  description String?
  dueDate     DateTime
  priority    String    // low, medium, high
  isCompleted Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model News {
  id          String    @id @default(cuid())
  title       String
  content     String    @db.Text
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Message {
  id          String    @id @default(cuid())
  senderId    String
  sender      User      @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId  String
  receiver    User      @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  content     String    @db.Text
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Notification {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  message     String
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
